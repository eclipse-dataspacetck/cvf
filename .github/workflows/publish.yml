#
#  Copyright (c) 2024 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#    https://www.apache.org/licenses/LICENSE-2.0
#
#  SPDX-License-Identifier: Apache-2.0
#
#  Contributors:
#    Bayerische Motoren Werke Aktiengesellschaft (BMW AG) - initial API and implementation
#

## This workflow is either triggered automatically, when the run-tests.yaml workflow has completed, or upon manual triggering.
## When manually triggered, it will take an optional SemVer string as input.

---
name: "Publish Artefacts"

on:
  workflow_run:
    workflows: [ "Run Tests" ]
    branches:
      - main
      - releases
      - release/*
    types:
      - completed
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      version:
        description: Semantic Version string to use for this release. Append -SNAPSHOT to publish to OSSRH Snapshots
        required: false

env:
  INPUT_VERSION: ${{ github.event.inputs.version || inputs.version }}


concurrency:
  # cancel only running jobs on pull requests
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  Check-Credentials:
    runs-on: ubuntu-latest
    outputs:
      HAS_DOCKER: ${{ steps.check-credentials.outputs.HAS_DOCKER }}
      HAS_OSSRH: ${{ steps.check-credentials.outputs.HAS_OSSRH }}
    steps:
      - name: Check whether secrets exist
        id: check-credentials
        run: |
          [ ! -z "${{ secrets.DOCKER_HUB_TOKEN }}" ] && echo "HAS_DOCKER=true" >> $GITHUB_OUTPUT
          [ ! -z "${{ secrets.GPG_PASSPHRASE }}" ] &&
          [ ! -z "${{ secrets.GPG_PRIVATE_KEY }}" ] &&
          [ ! -z "${{ secrets.OSSRH_USERNAME }}" ] &&
          [ ! -z "${{ secrets.OSSRH_PASSWORD }}" ]  && echo "HAS_OSSRH=true" >> $GITHUB_OUTPUT
          exit 0

  Determine-Version:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get-version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
      - name: "Determine version string"
        id: get-version
        run: |
          if [ -z ${{ env.INPUT_VERSION }} ]; then
            # read version from gradle.properties...
            echo "VERSION=$(grep "version" gradle.properties  | awk -F= '{print $2}')" >> "$GITHUB_OUTPUT"
          else
            # ...or take it from the workflow input
            echo "VERSION=${{ env.INPUT_VERSION }}" >> "$GITHUB_OUTPUT"
          fi


  Publish-Maven-Artefacts:
    name: "Publish artefacts to OSSRH Snapshots / MavenCentral"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: [ Check-Credentials, Determine-Version ]

    # do not run on PR branches, do not run on releases
    if: |
      needs.Check-Credentials.outputs.HAS_OSSRH && github.event_name != 'pull_request' && github.ref != 'refs/heads/releases'
    steps:
      - uses: actions/checkout@v4

      # Import GPG Key
      - uses: ./.github/actions/import-gpg-key
        name: "Import GPG Key"
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}

      - uses: ./.github/actions/setup-build
      # publish snapshots or releases
      - name: Publish version
        env:
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          VERSION: ${{ needs.Determine-Version.outputs.VERSION }}
        run: |-
          cmd=""
          if [[ $VERSION != *-SNAPSHOT ]]
          then
            cmd="closeAndReleaseSonatypeStagingRepository";
            echo "::debug::Publishing Version $VERSION to MavenCentral"
          else
            echo "::debug::Publishing Version $VERSION to OSSRH Snapshots"
          fi
          ./gradlew publishToSonatype ${cmd} --no-parallel -Pversion=$VERSION -Psigning.gnupg.executable=gpg -Psigning.gnupg.passphrase="${{ secrets.GPG_PASSPHRASE }}"

